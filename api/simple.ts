import express from "express";
import multer from "multer";

const app = express();

// Simple in-memory storage
let documents: any[] = [];
let projects: any[] = [];
let questions: any[] = [];
let nextId = 1;
let nextProjectId = 1;
let nextQuestionId = 1;

// Basic middleware
app.use(express.json());

// CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// File upload
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 10 * 1024 * 1024 }
});

// Upload endpoint
app.post("/api/documents/upload", upload.single('file'), (req, res) => {
  console.log('Simple upload received');

  if (!req.file) {
    return res.status(400).json({ error: "No file uploaded" });
  }

  const document = {
    id: `doc-${nextId++}`,
    filename: req.file.originalname,
    originalName: req.file.originalname,
    fileType: req.file.mimetype,
    fileSize: req.file.size,
    category: req.body.category || "organization-info",
    summary: `Uploaded ${req.file.originalname}`,
    processed: true,
    uploadedAt: new Date().toISOString(),
    userId: "user-123"
  };

  documents.push(document);
  console.log('Document stored. Total documents:', documents.length);

  res.json(document);
});

// List documents
app.get("/api/documents", (req, res) => {
  console.log('Documents list requested. Count:', documents.length);
  res.json(documents);
});

// Delete document
app.delete("/api/documents/:id", (req, res) => {
  const id = req.params.id;
  const index = documents.findIndex(doc => doc.id === id);

  if (index === -1) {
    return res.status(404).json({ error: "Document not found" });
  }

  documents.splice(index, 1);
  console.log('Document deleted. Remaining:', documents.length);

  res.json({ message: "Document deleted" });
});

// Projects endpoints
app.get("/api/projects", (req, res) => {
  console.log('Projects list requested. Count:', projects.length);
  res.json(projects);
});

app.post("/api/projects", (req, res) => {
  console.log('Create project request:', req.body);

  const project = {
    id: `project-${nextProjectId++}`,
    title: req.body.title || "Untitled Project",
    funder: req.body.funder || "",
    amount: req.body.amount || null,
    deadline: req.body.deadline || null,
    description: req.body.description || "",
    status: "draft",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    userId: "user-123"
  };

  projects.push(project);
  console.log('Project created:', project.id);

  res.json(project);
});

app.put("/api/projects/:id", (req, res) => {
  const id = req.params.id;
  const index = projects.findIndex(p => p.id === id);

  if (index === -1) {
    return res.status(404).json({ error: "Project not found" });
  }

  projects[index] = {
    ...projects[index],
    ...req.body,
    updatedAt: new Date().toISOString()
  };

  console.log('Project updated:', id);
  res.json(projects[index]);
});

// Questions endpoints
app.get("/api/projects/:id/questions", (req, res) => {
  const projectId = req.params.id;
  const projectQuestions = questions.filter(q => q.projectId === projectId);
  console.log('Questions for project', projectId, ':', projectQuestions.length);
  res.json(projectQuestions);
});

app.post("/api/projects/:projectId/questions", (req, res) => {
  const projectId = req.params.projectId;
  console.log('Create question for project:', projectId, req.body);

  const question = {
    id: `question-${nextQuestionId++}`,
    projectId: projectId,
    question: req.body.question || "",
    wordLimit: req.body.wordLimit || null,
    priority: req.body.priority || "medium",
    createdAt: new Date().toISOString(),
    userId: "user-123"
  };

  questions.push(question);
  console.log('Question created:', question.id);

  res.json(question);
});

// Generate response endpoint
app.post("/api/questions/:id/generate", (req, res) => {
  const questionId = req.params.id;
  console.log('Generate response for question:', questionId, req.body);

  // Mock generation response
  const response = {
    id: `response-${Date.now()}`,
    questionId: questionId,
    content: "This is a sample AI-generated response for your grant application question. In a real implementation, this would be generated by an AI service based on your uploaded documents and the specific question asked.",
    tone: req.body.tone || "professional",
    wordCount: 45,
    status: "completed",
    generatedAt: new Date().toISOString()
  };

  console.log('Response generated:', response.id);
  res.json(response);
});

// Other endpoints
app.get("/api/stats", (req, res) => res.json({ activeProjects: projects.length }));
app.get("/api/settings", (req, res) => res.json({ defaultTone: "professional" }));

// Extract questions from uploaded document (simplified)
app.post("/api/extract-questions", upload.single('file'), (req, res) => {
  console.log('Extract questions request received');

  if (!req.file) {
    return res.status(400).json({ error: "No file uploaded" });
  }

  // Simple mock extraction - return some sample questions
  const sampleQuestions = [
    "Describe your organization's mission and primary objectives.",
    "What specific problem does your proposed project address?",
    "How will you measure the success of your project?",
    "What is your organization's experience with similar projects?",
    "Provide a detailed budget breakdown for the requested funds."
  ];

  console.log('Returning sample questions for:', req.file.originalname);

  res.json({
    questions: sampleQuestions,
    filename: req.file.originalname,
    extractedCount: sampleQuestions.length
  });
});

// Health check
app.get("/api/status", (req, res) => {
  res.json({
    api: "simple-version",
    documents: documents.length,
    timestamp: new Date().toISOString()
  });
});

export default app;