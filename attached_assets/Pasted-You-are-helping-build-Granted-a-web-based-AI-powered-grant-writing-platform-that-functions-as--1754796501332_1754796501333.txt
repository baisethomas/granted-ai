You are helping build **Granted**, a web-based, AI-powered grant writing platform that functions as a fully agentic assistant for individuals and organizations pursuing grant funding.

---

## ðŸŽ¯ App Purpose
Granted eliminates the complexity and time burden of grant writing by using a language model (e.g. GPT, Claude, Mistral, etc.) to analyze user-uploaded documents and autonomously generate compelling, funder-aligned grant applications. The system is designed to reduce user interaction to the bare minimum while still producing high-quality, personalized responses.

---

## ðŸ§  Core Capabilities (AI Agent Functionality)
The AI assistant should operate with agency, drawing from context to complete tasks without being prompted step-by-step by the user.

**Key agent tasks:**
1. **Context ingestion**:
   - Summarize uploaded documents (mission statements, past grants, resumes, budgets).
   - Construct a private knowledge base for each user/org.
2. **Autonomous generation**:
   - Given a grant prompt or form, generate aligned responses using relevant internal context.
   - If critical info is missing, generate **concise, targeted questions** to fill in gaps.
3. **Grant form completion**:
   - Use provided grant templates or pasted questions to auto-fill fields or sections with user-specific content.
4. **Stylistic tuning**:
   - Allow users to select tones (Professional, Data-Driven, Storytelling, etc.) to shape outputs.
5. **Evaluation** *(optional module)*:
   - Score drafts against funder rubrics using structured criteria.
   - Suggest improvements or rewrites based on rubric alignment.

---

## ðŸ§± MVP UI & Feature Structure
Start by scaffolding the front end and backend integrations for the following components:

### Pages:
- âœ… **Dashboard** â€“ displays current/past projects, win stats, and deadlines
- âœ… **Upload Documents** â€“ drag-and-drop zone with file tagging
- âœ… **Grant Form Input** â€“ paste or select grant questions/templates
- âœ… **Generated Draft Preview** â€“ edit, export, and track revisions
- âœ… **Settings/Profile** â€“ manage organization info, tone preferences, and AI behavior

### Components:
- [ ] Context summarizer
- [ ] Response generator (LLM-agnostic)
- [ ] Clarification engine (mini chat or form)
- [ ] Export tools (PDF, DOCX, copy)
- [ ] Version history viewer

---

## ðŸ”’ Backend Infrastructure
- Use **Supabase** or **Firebase** for:
  - Auth (email/password + optional OAuth)
  - File storage for documents
  - Realtime database for project metadata
  - Role-based access for team collaboration (optional in MVP)

- Architect the system to support **pluggable LLMs** via API (OpenAI, Anthropic, local models, etc.) with an abstraction layer to switch providers.

---

## ðŸ“¦ Future Feature Modules (Post-MVP)
These are **not part of the initial build**, but should be modular for easy addition later:

### 1. **Collaboration**
- Shared projects with granular permissions (owner, editor, reviewer)
- Inline commenting and suggestions

### 2. **Grant Tracking & PM Tools**
- Grant status (drafting, submitted, awarded, declined)
- Calendar sync with due dates
- Custom milestones & tasks

### 3. **Intelligent Add-ons**
- Rubric scoring and alignment dashboard
- Fundability prediction engine
- Grant recommendation engine (using uploaded org data)
- In-app training prompts or grant-writing coach mode

### 4. **Integrations**
- Google Drive / Dropbox / CRM integrations
- API-based grant listings (e.g. Foundation Center)

---

## ðŸ’¡ Context Engineering Principles Embedded
- Use document embeddings or summarization to persist **user-specific memory** per org/project.
- Extract all data needed for generation from **uploaded content + minimal prompts** (few-shot or no-shot interaction).
- Let AI drive the process with initiative â€” user input should enhance, not micromanage, the agent.
- Modularize the AI architecture to adapt across models and use cases (generation, classification, summarization, evaluation).

---

## âœ… Next Steps
1. Scaffold file and folder structure with React components for each page.
2. Create backend hooks for uploading and storing documents.
3. Build the basic document summarizer to generate contextual memory.
4. Set up an agent wrapper around the selected LLM for contextual grant response generation.
5. Implement secure auth and local state management.

---
